{"ast":null,"code":"var _jsxFileName = \"D:\\\\duckBilled\\\\duckbilled_test\\\\src\\\\contexts\\\\WalletContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WalletContext = /*#__PURE__*/createContext();\nexport const WalletProvider = ({\n  children\n}) => {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      }).then(() => setIsConnected(true)).catch(err => console.log(err));\n    } else {\n      console.log(\"Please install MetaMask!\");\n    }\n  };\n\n  // This effect will run once after the component mounts.\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length > 0) {\n          setIsConnected(true);\n        } else {\n          setIsConnected(false);\n        }\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: {\n      isConnected,\n      connectWallet\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(WalletProvider, \"X8xpX3k6aXdyWkMXjkSdizyzA6Y=\");\n_c = WalletProvider;\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","ethers","jsxDEV","_jsxDEV","WalletContext","WalletProvider","children","_s","isConnected","setIsConnected","connectWallet","window","ethereum","request","method","then","catch","err","console","log","on","accounts","length","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/duckBilled/duckbilled_test/src/contexts/WalletContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\nimport { ethers } from \"ethers\";\r\n\r\nexport const WalletContext = createContext();\r\n\r\nexport const WalletProvider = ({ children }) => {\r\n  const [isConnected, setIsConnected] = useState(false);\r\n\r\n  const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n      window.ethereum\r\n        .request({ method: \"eth_requestAccounts\" })\r\n        .then(() => setIsConnected(true))\r\n        .catch((err) => console.log(err));\r\n    } else {\r\n      console.log(\"Please install MetaMask!\");\r\n    }\r\n  };\r\n\r\n  // This effect will run once after the component mounts.\r\n  useEffect(() => {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setIsConnected(true);\r\n        } else {\r\n          setIsConnected(false);\r\n        }\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <WalletContext.Provider value={{ isConnected, connectWallet }}>\r\n      {children}\r\n    </WalletContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,OAAO,MAAMC,aAAa,gBAAGN,aAAa,CAAC,CAAC;AAE5C,OAAO,MAAMO,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAMW,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAIC,MAAM,CAACC,QAAQ,EAAE;MACnBD,MAAM,CAACC,QAAQ,CACZC,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC,CAC1CC,IAAI,CAAC,MAAMN,cAAc,CAAC,IAAI,CAAC,CAAC,CAChCO,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;IACrC,CAAC,MAAM;MACLC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACzC;EACF,CAAC;;EAED;EACAnB,SAAS,CAAC,MAAM;IACd,IAAIW,MAAM,CAACC,QAAQ,EAAE;MACnBD,MAAM,CAACC,QAAQ,CAACQ,EAAE,CAAC,iBAAiB,EAAGC,QAAQ,IAAK;QAClD,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;UACvBb,cAAc,CAAC,IAAI,CAAC;QACtB,CAAC,MAAM;UACLA,cAAc,CAAC,KAAK,CAAC;QACvB;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEN,OAAA,CAACC,aAAa,CAACmB,QAAQ;IAACC,KAAK,EAAE;MAAEhB,WAAW;MAAEE;IAAc,CAAE;IAAAJ,QAAA,EAC3DA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACrB,EAAA,CAhCWF,cAAc;AAAAwB,EAAA,GAAdxB,cAAc;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}