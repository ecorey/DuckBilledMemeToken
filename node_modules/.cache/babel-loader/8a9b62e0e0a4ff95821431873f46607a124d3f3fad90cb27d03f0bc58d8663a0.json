{"ast":null,"code":"var _jsxFileName = \"D:\\\\duckBilled\\\\duckbilled_test\\\\src\\\\contexts\\\\WalletContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WalletContext = /*#__PURE__*/createContext();\nexport const WalletProvider = ({\n  children\n}) => {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        setProvider(new ethers.providers.Web3Provider(window.ethereum));\n      } catch (error) {\n        console.error(\"User refused to connect their wallet\");\n      }\n    } else {\n      console.log(\"Please install MetaMask!\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: {\n      provider,\n      connectWallet\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(WalletProvider, \"xtTuOAY8k/s2BV2pXmjZ667ORoM=\");\n_c = WalletProvider;\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useState","ethers","jsxDEV","_jsxDEV","WalletContext","WalletProvider","children","_s","provider","setProvider","connectWallet","window","ethereum","request","method","providers","Web3Provider","error","console","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/duckBilled/duckbilled_test/src/contexts/WalletContext.js"],"sourcesContent":["import React, { createContext, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\n\r\nexport const WalletContext = createContext();\r\n\r\nexport const WalletProvider = ({ children }) => {\r\n  const [provider, setProvider] = useState(null);\r\n\r\n  const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n        setProvider(new ethers.providers.Web3Provider(window.ethereum));\r\n      } catch (error) {\r\n        console.error(\"User refused to connect their wallet\");\r\n      }\r\n    } else {\r\n      console.log(\"Please install MetaMask!\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <WalletContext.Provider value={{ provider, connectWallet }}>\r\n      {children}\r\n    </WalletContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AACtD,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,OAAO,MAAMC,aAAa,gBAAGL,aAAa,CAAC,CAAC;AAE5C,OAAO,MAAMM,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMU,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAIC,MAAM,CAACC,QAAQ,EAAE;MACnB,IAAI;QACF,MAAMD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAsB,CAAC,CAAC;QAChEL,WAAW,CAAC,IAAIR,MAAM,CAACc,SAAS,CAACC,YAAY,CAACL,MAAM,CAACC,QAAQ,CAAC,CAAC;MACjE,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,CAAC;MACvD;IACF,CAAC,MAAM;MACLC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACzC;EACF,CAAC;EAED,oBACEhB,OAAA,CAACC,aAAa,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAAEb,QAAQ;MAAEE;IAAc,CAAE;IAAAJ,QAAA,EACxDA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAAClB,EAAA,CArBWF,cAAc;AAAAqB,EAAA,GAAdrB,cAAc;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}